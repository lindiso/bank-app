/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.bank.controllers;

import com.bank.dto.AccountDto;
import com.bank.dto.TechnicalErrorResponse;
import com.bank.services.AccountService;
import io.swagger.annotations.*;
import jakarta.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;


@Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2025-06-21T11:48:37.683+02:00")
@RestController
@Api(value = "withdraw", description = "the withdraw API")
@RequestMapping(value = "/bank")
public class WithdrawApiController {
    Logger log = LoggerFactory.getLogger(WithdrawApiController.class);

    @Autowired
    AccountService accountService;


    @ApiOperation(value = "Execute the cash withdrawal", nickname = "executeCashWithdrawal", notes = "", response = String.class, tags={ "Withdraw cash Operations", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Withdrawal executed successfully", response = String.class),
        @ApiResponse(code = 400, message = "Invalid input parameter", response = TechnicalErrorResponse.class),
        @ApiResponse(code = 412, message = "Any server error conditions.", response = TechnicalErrorResponse.class) })
    @RequestMapping(value = "/withdraw/{accountId}/{amount}",
        produces = { "application/json" },
            consumes = MediaType.APPLICATION_JSON_VALUE,        method = RequestMethod.POST)
     ResponseEntity<String> executeCashWithdrawal(@ApiParam(value = "The unique account Id",required=true) @PathVariable("accountId") Integer accountId, @ApiParam(value = "The amount to withdraw",required=true) @PathVariable("amount") Integer amount) {
        String results = accountService.withdraw(accountId.longValue(), BigDecimal.valueOf(amount));

        return new ResponseEntity<>(results, HttpStatus.OK);
    }

    @RequestMapping(path = "/create/account/{accountId}/{amount}", method = RequestMethod.POST, produces = { "application/json" }, consumes = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<String> createAccount(@ApiParam(value = "The unique account Id",required=true) @PathVariable("accountId") Integer accountId, @ApiParam(value = "The amount to deposit",required=true) @PathVariable("amount") Integer amount) {
        String results = accountService.createAccount(accountId.longValue(), BigDecimal.valueOf(amount));
        return new ResponseEntity<>(results, HttpStatus.OK);
    }

    @RequestMapping(path = "/find/account/{accountId}/", method = RequestMethod.GET, produces = { "application/json" }, consumes = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<AccountDto> getAccount(@ApiParam(value = "The unique account Id",required=true) @PathVariable("accountId") Integer accountId) {
        log.info("<<<<<<<Account Id: {} >>>>>>>>>>>>>>", accountId);
        AccountDto results = accountService.findAccount(accountId.longValue());
        return new ResponseEntity<>(results, HttpStatus.OK);
    }

    @ApiOperation(value = "Execute the cash Deposit", nickname = "executeCashDeposit", notes = "", response = String.class, tags={ "Deposit cash Operations", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Deposit executed successfully", response = String.class),
            @ApiResponse(code = 400, message = "Invalid input parameter", response = TechnicalErrorResponse.class),
            @ApiResponse(code = 412, message = "Any server error conditions.", response = TechnicalErrorResponse.class) })
    @RequestMapping(value = "/deposit/{accountId}/{amount}",
            produces = { "application/json" },
            consumes = MediaType.APPLICATION_JSON_VALUE,        method = RequestMethod.POST)
    ResponseEntity<String> depositCash(@ApiParam(value = "The unique account Id",required=true) @PathVariable("accountId") Integer accountId, @ApiParam(value = "The amount to deposit",required=true) @PathVariable("amount") Integer amount) {
        String results = accountService.deposit(accountId.longValue(), BigDecimal.valueOf(amount));

        return new ResponseEntity<>(results, HttpStatus.OK);
    }

}
